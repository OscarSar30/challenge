openapi: 3.0.0
info:
  title: API Customer.
  description: Service for the client-person entity.
  contact:
    email: oscar.sarcoss@outlook.com
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - bearerAuth: []
paths:
  /customers:
    get:
      tags:
        - Customer
      summary: Consult list of active customers
      description: Consult list of active customers.
      operationId: GetCustomers
      responses:
        '200':
          description: OK
          content:
            application/json; charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetCustomersResponse'
        '400':
          description: Bad Request
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Customer
      summary: Create new customer
      description: Create new customer.
      operationId: PostCustomer
      requestBody:
        content:
          application/json; charset=UTF-8:
            schema:
              $ref: '#/components/schemas/PostCustomerRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/PostCustomerResponse'
        '400':
          description: Bad Request
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /customers/{customerId}:
    delete:
      tags:
        - Customer
      summary: Delete customer by ID
      description: Delete customer by ID.
      operationId: DeleteCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Customer
      summary: Update customer by ID
      description: Update customer by ID.
      operationId: PutCustomerById
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Cliente
        content:
          application/json; charset=UTF-8:
            schema:
              $ref: '#/components/schemas/PutCustomerByIdRequest'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Customer
      summary: Search customer by ID
      description: Search customer by ID.
      operationId: GetCustomerById
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/GetCustomersResponse'
        '400':
          description: Bad Request
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json; charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PostCustomerRequest:
      required:
        - password
        - identification
        - fullName
        - status
      type: object
      properties:
        identification:
          maxLength: 13
          minLength: 10
          pattern: "^[0-9]+$"
          type: string
        fullName:
          maxLength: 255
          minLength: 10
          pattern: "^[A-Za-zÁÉÍÓÚáéíóúÑñ ]+$"
          type: string
        gender:
          type: string
          enum: [MASCULINO, FEMENINO, OTRO]
        age:
          type: integer
          minimum: 0
          maximum: 120
          format: int32
        address:
          maxLength: 255
          pattern: "^[A-Za-zÁÉÍÓÚáéíóúÑñ0-9 _.,-]+$"
          type: string
        phone:
          maxLength: 20
          pattern: "^\\+?[0-9]+$"
          type: string
        password:
          minLength: 8
          maxLength: 16
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#\\$%\\^&\\*()_\\+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,16}$"
          type: string
        status:
          type: boolean
    PostCustomerResponse:
      properties:
        customerId:
          type: string
          format: uuid
    PutCustomerByIdRequest:
      type: object
      properties:
        identification:
          maxLength: 13
          minLength: 10
          pattern: "^[0-9]{10,13}$"
          type: string
        fullName:
          maxLength: 255
          minLength: 10
          pattern: "^[A-Za-zÁÉÍÓÚáéíóúÑñ ]+$"
          type: string
        gender:
          type: string
          enum: [MASCULINO, FEMENINO, OTRO]
        age:
          type: integer
          minimum: 0
          maximum: 120
          format: int32
        address:
          maxLength: 255
          pattern: "^[A-Za-zÁÉÍÓÚáéíóúÑñ0-9 _.,-]+$"
          type: string
        phone:
          maxLength: 20
          pattern: "^\\+?[0-9]+$"
          type: string
        password:
          minLength: 8
          maxLength: 16
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#\\$%\\^&\\*()_\\+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{8,16}$"
          type: string
        status:
          type: boolean
    GetCustomersResponse:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
        identification:
          type: string
        fullName:
          type: string
        gender:
          type: string
          enum: [MASCULINO, FEMENINO, OTRO]
        age:
          type: integer
          format: int32
        address:
          type: string
        phone:
          type: string
        password:
          type: string
        status:
          type: boolean
    ErrorDetail:
      type: object
      properties:
        message:
          type: string
        businessMessage:
          type: string
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        detail:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'